pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            //args '-u root:sudo -v /var/run/docker.sock:/var/run/docker.sock'
            args '-u root'
        }
    }
    stages {
        stage ('GIT Checkout') {
            steps {
                sh 'echo passed!'
                //git branch: 'main', url: 'https://github.com/ben-israel/argocd-k8.git'
            }
        }
        stage ('Maven Build and Test') {
            steps {
                sh 'ls -ltr'
                //build the project and create an output JAR file
                sh 'cd springboot-app && mvn clean package'
            }
        }
        stage ('SonarQube Code Analysis') {
            environment {
                SONAR_URL = "http://34.123.19.40:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                sh 'cd springboot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage ('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "benisrael/ultimate-cicd:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "springboot-app/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd springboot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage ('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "argocd-k8"
                GIT_USER_NAME = "Ben-Israel"
            }
            steps {
                withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    git config user.email "benny.dh@gmail.com"
                    git config user.name "Ben Israel"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" springboot-app-manifests/deployment.yaml
                    git add springboot-app-manifests/deployment.yaml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}